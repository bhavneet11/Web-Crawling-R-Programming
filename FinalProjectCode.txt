library(UsingR)
library(RJSONIO)
library(nnet)

kaggledataRaw = fromJSON("C:\\Users\\Jagpreet Singh\\Documents\\homework3\\train.json\\train.json")
kaggleDataTest = fromJSON("C:\\Users\\Jagpreet Singh\\Downloads\\test.json\\test.json")
head(KaggleData)

KaggleData = kaggledataRaw[['interest_level']]
Bathroom = kaggledataRaw$bathrooms
Bedroom = kaggledataRaw$bedrooms
Address = kaggledataRaw$display_address
Building_ID = kaggledataRaw$building_id
Created = kaggledataRaw$created
Description = kaggledataRaw$description
Features = kaggledataRaw$features
Latitude = kaggledataRaw$latitude
Listing_ID = kaggledataRaw$listing_id
Longitude = kaggledataRaw$longitude
Manager_ID = kaggledataRaw$manager_id
Photos = kaggledataRaw$photos
Price = kaggledataRaw$price
Street_address = kaggledataRaw$street_address
Interest=kaggledataRaw$interest_level





KaggleData_TEST = kaggleDataTest[['interest_level']]
Bathroom_TEST = kaggleDataTest$bathrooms
Bedroom_TEST = kaggleDataTest$bedrooms
Address_TEST = kaggleDataTest$display_address
Building_ID_TEST = kaggleDataTest$building_id
Created_TEST = kaggleDataTest$created
Description_TEST = kaggleDataTest$description
Features_TEST = kaggleDataTest$features
Latitude_TEST = kaggleDataTest$latitude
Listing_ID_TEST = kaggleDataTest$listing_id
Longitude_TEST = kaggleDataTest$longitude
Manager_ID_TEST = kaggleDataTest$manager_id
Photos_TEST = kaggleDataTest$photos
Price_TEST = kaggleDataTest$price
Street_address_TEST = kaggleDataTest$street_address
Interest_TEST=kaggleDataTest$interest_level

# 
# i=1
# num_rat=c(0)
# 
# 
# while(i<=length(KaggleData))
# {
#   if(KaggleData[[i]]=="high")
#   {
#     num_rat[i] = "1"
#   }
#   else if(KaggleData[[i]]=="medium" | KaggleData[[i]]=="low")
#   {
#     num_rat[i] = "0.5"
#   }
# 
#   i=i+1
# }

real_data<- data.frame(Interest,Bathroom,Bedroom,Latitude,Longitude,Price)
real_datatest=data.frame(Interest_TEST,Bathroom_TEST,Bedroom_TEST,Latitude_TEST,Longitude_TEST,Price_TEST)
head(real_data)

nrow(Bedroom_TEST)

set.seed(897)
idxTrain <- sample(nrow(real_data),as.integer(nrow(real_data)*0.5))
train.real_data = real_data[idxTrain,]
test.real_data = real_data[-idxTrain,]

# glm_fit<- glm(num_rat~Bathroom+Bedroom+Price+Latitude+Longitude,data = train.real_data,family = "binomial")
# summary(glm_fit)
# predict_fit<- predict(glm_fit,test.real_data,type = "response")
# prediction <- rep(0,length(predict_fit))
# prediction[predict_fit > 0.5] <- 1
# prediction[predict_fit < 0.5] <- 0
# accuracy=sum(diag(table(test.real_data$num_rat,prediction)))/nrow(test.real_data)
# accuracy



multi=multinom(Interest~.,data = train.real_data,family = "multinomial")
summary(multi)
predict_fit<- predict(multi,test.real_data)
accuracy=sum(diag(table(test.real_data$Interest,predict_fit)))/nrow(test.real_data)
accuracy

z=  summary(multi)$coefficients/summary(multi)$standard.errors
p = (1-pnorm(abs(z),0,1))*2
coeff = summary(multi)$coefficients
std.err = summary(multi)$standard.errors
t = cbind(t(coeff),t(std.err),t(z),t(p))
t= unique(t)
t
rm(list = ls())
